Q. 데이터 10,000개를 가지고 무한 스크롤 구현시에 가장 중요하게 고려해야 할 점은?

A.
데이터 만 개를 가지고 무한 스크롤을 구현할 때에 가장 중요하게 고려해야 할 점은 "DOM 최적화" 입니다.

- 브라우저 성능 : 만약 만 개의 데이터를 한꺼번에 모두 DOM에 로드한다고 하면 브라우저 성능이 크게 저하될 수 있습니다.
- 메모리 사용량 : 대량의 DOM 노드는 브라우저에서 메모리 사용량을 크게 증가시켜 특히 모바일 기기같은 메모리가 제한된 환경에서 문제가 될 수 있습니다.
- 사용자 경험 : 스크롤 성능 저하, 초기 로딩 시간 증가 등 사용자 경험을 증가시킬 수 있습니다.

따라서, DOM 최적화 측면에서 고려했을 때 만 개의 데이터로 무한 스크롤을 구현할 때에는 "useInfiniteQuery"와 같은 react-query의 기능을 사용해
화면에 보이는 부분만 렌더링하고, 나머지는 메모리에 저장하는 등의 DOM 최적화를 할 수 있습니다.
이렇게 되면 대량의 데이터에도 브라우저 성능 저하를 최소화할 수 있습니다.




Q. 데이터 10,000개를 처리할 때 각각의 접근 방법과 장단점은 ?

A.

1. axios.get으로 데이터 통째로 불러오기

[장점]
- 추가적인 라이브러리나 설정 없이 간편하게 데이터를 불러올 수 있음
- 서버와의 통신 횟수가 줄어듦

[단점]
- 데이터를 한 번에 불러오므로 초기 로딩 시간이 느려지는 등의 UX 저하될
- 화면에 렌더링되지 않을 데이터까지 불러와 메모리 누수를 초래할 수 있음
- 전체 데이터를 DOM에 로드하게 되면 브라우저 성능 저하를 초래해 DOM 최적화에 문제가 생길 수 있음


2. useQuery 사용하기

[장점]
- react-query의 자동 리프래시, 캐싱, 백그라운드 데이터 동기화와 같은 고급 기능 사용 가능

[단점]
- axios.get과 같은 유사한 문제 발생 (전체 데이터를 로드하므로)


3. useInfiniteQuery 사용하기

[장점]
- 데이터를 여러 페이지로 나누어 요청함 -> 초기 로딩 시간이 짧아짐 -> 사용자는 필요한 부분의 데이터만 빠르게 볼 수 있음 -> ux 개선
- 화면에 보이는 부분만 렌더링하고 나머지는 메모리에 저장하는 등의 DOM 최적화가 가능해짐 
    -> 대량의 데이터에도 브라우저 성능 저하를 최소화할 수 있음


[단점]
- 서버와 여러 번 통신해야 함
- 각 요청마다 처리하는 데이터 양이 적기 때문에 전반적인 성능에는 긍정적인 영향


[결론]
- 다량의 데이터가 있을 때 DOM 최적화의 관점에서 볼 때 useInfiniteQuery가 가장 적합함
- 초기 로딩 시간을 줄이고, 브라우저 성능 문제도 효과적으로 관리할 수 있기 때문