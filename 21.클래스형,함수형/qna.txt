Q. React에서 클래스형과 함수형의 차이를 설명. 어떤 방식을 주로 사용하였고 그 이유가 무엇인지?


[클래스형 컴포넌트의 특징]

constructor와 render 메서드 등의 라이프사이클 메서드를 포함한다.
내부적으로 this 키워드를 통해 컴포넌트의 상태와 props에 접근할 수 있다.
라이프사이클 메서드(componentDidMount, componentDidUpdate 등)를 사용하여 컴포넌트의 생성 및 업데이트 과정을 관리한다.
더 복잡하고 큰 프로젝트에서 가독성이 떨어질 수 있다.


[함수형 컴포넌트의 특징]

React 16.8 이후 Hooks를 사용하여 상태 관리와 라이프사이클을 구현할 수 있다.
간결하고 가독성이 좋아진다.
재사용성이 높아진다. (커스텀 Hooks 등을 통해)
useState, useEffect 등의 훅을 활용하여 컴포넌트 로직을 구현한다.

[차이점]

클래스형은 this 키워드를 필요로 하지만, 함수형은 훅을 통해 로직을 구현한다.
함수형 컴포넌트는 리액트의 훅을 사용하여 상태와 라이프사이클을 관리하며, 클래스형은 전통적인 라이프사이클 메서드를 통해 관리한다.
코드의 길이와 구조적인 측면에서 함수형이 간결하고 가독성이 좋다.
리액트의 팀은 함수형 컴포넌트와 훅을 적극적으로 권장하고 있다.


[함수형 컴포넌트를 주로 사용한 이유]

1. Hooks의 도입: useState로 상태 관리, useEffect로 라이프사이클 및 사이드 이펙트 관리.
예시: const [count, setCount] = useState(0); useEffect(() => { document.title = Count: ${count}; });

2. 재사용성: Custom Hooks로 로직 재사용 용이.
    - 클래스형에서는 메서드나 상태를 직접적으로 재사용하기 어려움.
    - Custom Hooks는 로직을 독립적인 함수로 분리하여 여러 컴포넌트에서 사용 가능.
예시: 데이터 가져오기 로직을 useFetchData라는 Custom Hook으로 만들어 여러 컴포넌트에서 사용.

3.성능 최적화: 함수형은 메모리 사용량 적음.

4. 클래스형은 인스턴스 생성 필요, 함수형은 인스턴스 없이 실행. 그 결과로 메모리 효율적 사용.

5. 팀과의 일관성:
함수형 컴포넌트와 Hooks 사용 권장으로, 새로운 프로젝트나 팀원 간 코드 스타일 일관성 유지 용이.

6. 학습 곡선: 초보자에게 함수형이 더 직관적.
예시: 상태 설정은 this.state = { count: 0 }; (클래스형) 대신 const [count, setCount] = useState(0); (함수형)으로 간단하게.

