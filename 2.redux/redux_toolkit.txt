Redux Toolkit은 내부적으로 Immer 라이브러리를 사용하여 불변성을 쉽게 관리할 수 있게 해줍니다. 
Redux Toolkit의 `createSlice` 함수를 사용하면 액션 생성자와 리듀서를 한 번에 만들 수 있는데, 이때 리듀서에서 Immer가 암묵적으로 사용됩니다.

기존의 Redux에서는 상태를 업데이트할 때 불변성을 유지하기 위해 상태를 복사하고 수정하는 방식을 사용해야 했습니다. 
이는 코드가 복잡해지고, 실수를 할 가능성이 높았습니다.

그러나 Redux Toolkit에서는 Immer 덕분에 마치 상태를 직접 수정하는 것처럼 코드를 작성해도 불변성이 유지됩니다. 
이는 Immer가 우리가 작성한 코드를 가져와 '불변성이 유지되는 방식'으로 변환하기 때문입니다.

예를 들어, Redux Toolkit과 Immer를 사용한 Todo List의 리듀서는 다음과 같이 작성할 수 있습니다:

import { createSlice } from '@reduxjs/toolkit'

const todoSlice = createSlice({
  name: 'todos',
  initialState: [],
  reducers: {
    addTodo: (state, action) => {
      // 직접 상태를 수정하는 것처럼 보이지만, Immer가 불변성을 유지해줍니다.
      state.push({ id: Date.now(), text: action.payload, completed: false })
    },
    toggleTodo: (state, action) => {
      const todo = state.find(todo => todo.id === action.payload)
      if (todo) {
        todo.completed = !todo.completed
      }
    },
  },
})

export const { addTodo, toggleTodo } = todoSlice.actions

export default todoSlice.reducer


위의 코드에서 볼 수 있듯이, Redux Toolkit과 Immer를 사용하면 상태를 직접 수정하는 것처럼 코드를 작성하면서도 불변성을 쉽게 유지할 수 있습니다. 
이로 인해 코드가 간결해지고 가독성이 향상됩니다.