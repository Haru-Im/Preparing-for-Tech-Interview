Q. 쓰로틀링과 디바운싱의 개념과 사용하는 이유

[개념]
scroll, resize, input, mousemove 같은 이벤트는 짧은 시간 간격으로 연속해서 발생함. 
이러한 이벤트에 바인딩한 이벤트 핸들러는 과도하게 호출되어 성능에 문제를 일으킬 수 있음. 
디바운스와 스로틀은 짧은 시간 간격으로 연속해서 발생하는 이벤트를 그룹화하여 과도한 이벤트 핸들러의 호출을 방지하는 프로그래밍 기법

----------------------------------------------------------------

[디바운스란?]
- 짧은 시간 간격으로 이벤트 연속해 발생하면 이벤트 핸들러를 호출하지 않다가 일정 시간이 경과한 이후에 이벤트 핸들러가 한 번만 호출되도록 하는 것
- 즉 짧은 시간 간격으로 발생하는 이벤트를 그룹화하여 마지막에 한 번만 이벤트 핸들러가 호출되도록 함

[사용 예시]

- 텍스트 입력 필드에서 input 이벤트가 짧은 시간 간격으로 연속해서 발생하는 경우
    - input 이벤트는 사용자가 입력할 때마다 연속해서 발생
    - 만약 input 이벤트 핸들러에서 사용자가 입력 필드에 요청한 값으로 ajax 요청과 같은 무거운 처리 수행한다면 사용자가 입력을 완료 못해도 ajax 요청이 전송될 것
    - 이는 서버에도 부담가는 불필요한 처리 ⇒ 사용자가 입력 완료했을 때 한 번만 ajax 요청 전송하는 것이 바람직

- 사용자가 입력 완료했는지 정확히 알 수 없으므로 일정 시간 동안 텍스트 입력 필드에 값을 입력하지 않으면 입력이 완료된 것으로 간주
- 이를 위해 debounce 함수를 활용할 수 있음
- delay보다 짧은 시간 간격으로 이벤트 발생 시 이전 타이머를 취소하고 새로운 타이머를 재설정
- 즉 delay보다 짧은 간격으로 이벤트 연속 발생 시 debounce 함수의 첫 번째 인자인 콜백 함수를 호출하지 않다가, delay동안 input 이벤트가 더 이상 발생하지 않으면 한 번만 호출됨

[주로 사용할 때]

- resize 이벤트 처리
- input 요소에 입력된 값으로 ajax 요청하는 입력 필드 자동완성 UI 구현
- 버튼 중복 클릭 방지 처리

실무에서는 Underscore의 debounce 함수나 Lodash의 debounce 함수를 사용하는 것을 권장

--------------------------------------------------------

[쓰로틀이란?]

- 짧은 시간 간격으로 이벤트 연속해 발생하더라도 일정 시간 간격으로 이벤트 핸들러가 최대 한 번만 호출되도록 하는 것
- 즉 짧은 시간 간격으로 연속해 발생하는 이벤트를 그룹화해서 일정 시간 단위로 이벤트 핸들러가 호출되도록 호출 주기를 만드는 것

[주로 사용할 때]

- scroll 이벤트 처리
- 무한 스크롤 UI 구현

마찬가지로 실무에서는 Underscore의 throttle 함수나 Lodash의 throttle 함수를 사용하는 것이 권장됨