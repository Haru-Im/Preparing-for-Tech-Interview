[식별자 (identifier)]
- 변수 이름 (함수, 클래스 이름도 마찬가지)
- 식별자는 값이 아니라 메모리 주소를 기억하고 있음
- 즉, 식별자는 메모리 주소에 붙인 이름

[변수 선언 (variable declaration)]

// 개념
- 변수를 생성하는 것
- 즉, 값을 저장하기 위한 메모리공간을 확보하고 식별자와 메모리 주소를 연결하여 값을 저장할 수 있게 준비하는 것
- 변수를 선언할 떄는 var, let, const 키워드를 사용

// 방법
var score;

- 이 경우 변수 선언 이후 변수에 값을 할당하지 않음
- 즉, 변수 선언에 의해 확보된 메모리 공간은 어떻게 될까?
    - 비어 있는 것이 아님!
    - 자바스크립트 엔진에 의해 undefined가 암묵적으로 할당되어 초기화됨

// 자바스크립트의 변수 선언 처리 과정
1. 선언 단계 : 변수 이름을 등록해 자바스크립트 엔진에 변수의 존재를 알림
2. 초기화 단계 : 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화함


// 식별자가 등록되는 곳
= 실행 컨텍스트
    - 자바스크립트 엔진이 소스코드를 평가하고 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 곳
    - 자바스크립트 엔진은 실행 컨텍스트를 통해 식별자와 스코프를 관리함
    - 변수 이름과 변수 값이 실행 컨텍스트 내에서 키/값을 가진 객체 형태로 등록됨


// 선언하지 않은 식별자에 접근한다면?
- ReferenceError (참조 에러) 발생
    - 자바스크립트 엔진이 등록된 식별자를 찾을 수 없을 때 발생하는 에러


[초기화 (initialization)]
- 변수가 선언된 이후 최초로 값을 할당하는 것

// 초기화가 필요한 이유
- 초기화 단계를 거치지 않으면 확보된 메모리 공간에는 이전에 다른 어플리케이션이 사용했던 값이 남아있을 수 있음
    - =쓰레기 값 (garbage value)
- 즉 메모리 공간을 확보한 다음 값을 할당하지 않은 상태에서 곧바로 변수 값을 참조하면 쓰레기 값이 나올 수 있음
- 자바스크립트 var 키워드는 암묵적으로 초기화를 수행하므로 이러한 위험으로부터 안전함