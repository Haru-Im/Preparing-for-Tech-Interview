- 보충 설명

[Redux]

Flux 아키텍쳐를 따르며, 상태 변경은 action을 통해 발생하고, reducer를 통해 action을 처리하는 방식

장점 : 

- 예측 가능한 상태 업데이트
    - redux는 액션에 따른 상태 변화를 명확하게 정의함으로써 애플리케이션의 동작을 예측하기 쉽게 함
- 중앙 집중식 상태 관리
    - 모든 상태를 하나의 스토어에서 관리하므로 상태를 효율적으로 관리할 수 있음
- 개발 도구와 커뮤니티 지원
    - redux는 redux toolkit같은 도구를 활용할 수 있으며 역사가 오래된 만큼 규모가 큰 커뮤니티에서 지원을 받을 수 있음

단점 :

- 복잡성
    - redux는 액성 생성자와 리듀서라는 개념 때문에 사용하기 까다로운 편이며 많은 보일러플레이트 코드를 작성해야 함
            - 액션 생성자 : 액션을 만들어주는 함수. 상태를 변경하려면 액션이라는 객체를 정의해야 함. 액션은 type을 가지고 있어야 하며 (어떤 종류의 작업을 수행하는지 나타내기 위함) 상태 변화에 필요한 추가 데이터가 포함될 수도 있음
            - 리듀서 : 액션 객체를 redux 스토어에 디스패치하면 redux는 액션을 처리하는 리듀서를 호출함. 리듀서는 이전 상태와 액션을 인자로 받아 새로운 상태를 반환하게 됨. 이 과정에서 상태는 불변성을 유지해야 하며, 이로 인해 보일러플레이트 코드가 발생할 수 있음
    - 즉, 상태 변화마다 액션 타입을 정의하고, 액션 생성자를 작성하며, 리듀서를 업데이트해야 하는 등의 절차가 필요함 → 리덕스는 상당한 양의 보일러플레이트 코드를 작성하게 하며 이로 인해 복잡성이 증가하게 됨

[Recoil]

상태를 atom이라는 단위로 관리하며, 각 atom은 개별적인 상태를 나타냄
이 atom들은 컴포넌트들 사이에서 공유될 수 있으며, 필요한 컴포넌트에서만 구독하게 해 불필요한 렌더링을 방지함
또한, selector라는 개념을 통해 상태에 기반한 파생 데이터를 효과적으로 관리할 수 있음
이로 인해 recoil은 비교적 간결하고 직관적인 API를 제공하지만, redux만큼의 엄격한 상태 관리나 개발 도구 지원은 부족한 편