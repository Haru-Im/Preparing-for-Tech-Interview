Q. 자바스크립트와 타입스크립트의 차이, 장/단점에 대해 설명

[자바스크립트의 특징]

동적 타이핑: 변수 선언 시 타입 지정 필요 없음.
프로토타입 기반: 객체 지향적인 특성을 프로토타입을 통해 구현함.
인터프리터 언어: 컴파일 단계 없이 바로 코드 실행 가능함.
일급 함수: 함수를 변수로 다룰 수 있으며, 매개변수로 전달하거나 반환값으로 사용할 수 있음.
비동기 처리 지원: Promise, async/await를 통해 비동기 로직 처리 가능함.

[타입스크립트의 특징]

정적 타이핑: 변수나 함수의 리턴 값에 타입을 지정함.
객체 지향 프로그래밍 지원: interface, class, generics 등의 기능 제공함.
컴파일 언어: 타입스크립트 코드는 자바스크립트로 변환되어 실행됨.
타입 추론: 명시적인 타입 지정 없이도 타입을 추론함.
명확한 에러 체크: 컴파일 시점에서의 타입 에러 체크로 안정성 확보함.

[자바스크립트의 장점]

유연성: 동적 타이핑으로 코드 작성이 유연함.
넓은 생태계: 광범위한 라이브러리와 프레임워크 지원함.
브라우저 호환성: 대부분의 웹 브라우저에서 바로 실행 가능함.

[자바스크립트의 단점]

에러 발견 어려움: 실행 시점까지 타입 관련 에러가 노출되지 않을 수 있음.
유지보수 어려움: 큰 규모의 프로젝트에서 코드의 유연성이 오히려 관리 어려움을 초래할 수 있음.

[타입스크립트의 장점]

타입 안정성: 컴파일 시 타입 체크로 오류 발견이 쉬움.
코드 품질 향상: 명확한 타입 지정으로 코드의 가독성과 유지보수성이 좋아짐.
강력한 툴링: IDE에서의 자동 완성, 인터페이스 확인 등의 툴링 지원이 탁월함.

[타입스크립트의 단점]

학습 곡선: 기존의 자바스크립트에 비해 추가적인 문법 학습 필요함.
컴파일 시간: 타입스크립트를 자바스크립트로 변환하는 데 시간이 추가로 필요함.

[차이점]

타이핑: 자바스크립트는 동적 타이핑, 타입스크립트는 정적 타이핑 사용함.
컴파일: 자바스크립트는 인터프리터, 타입스크립트는 컴파일러를 통해 코드 실행함.

타입 체크 : 
    타입스크립트: 타입스크립트는 컴파일 시 타입 체크를 제공하여 개발자가 코드를 작성하는 시점에서 타입 관련된 오류를 사전에 발견할 수 있게 힘.
    이를 통해 런타임 에러를 줄일 수 있음.

    자바스크립트: 자바스크립트는 동적 타이핑 언어로, 타입스크립트처럼 컴파일 시 타입 체크 기능이 없음. 
    따라서 개발자가 직접 유효성 검사나 타입 체크를 수행해야 하며, 런타임에서 타입 관련 오류가 발생할 수 있음.

--------------------------------------------------------

자바스크립트 (JavaScript)
설계 목적: 자바스크립트는 웹 브라우저에서 동작하는 스크립트 언어로 개발되었습니다. 
이를 위해 브라우저 내장 인터프리터를 통해 즉시 실행될 수 있게 설계되었습니다.

동작 방식: 웹 페이지가 로드될 때 자바스크립트 코드는 웹 브라우저 내부의 자바스크립트 엔진 
(예: V8, SpiderMonkey 등)에 의해 해석되고 실행됩니다.

타입스크립트 (TypeScript)
설계 목적: 타입스크립트는 자바스크립트의 확장버전으로, 정적 타입 검사와 인터페이스, 제네릭 같은 고급 타이핑 기능을 제공합니다. 
이러한 추가적인 기능들은 실행 시간에 영향을 주지 않기 때문에 컴파일 과정에서 제거되어야 합니다.

동작 방식: 타입스크립트 코드는 "tsc"라는 타입스크립트 컴파일러를 사용해 일반적인 자바스크립트 코드로 변환(트랜스파일)됩니다. 
이렇게 변환된 자바스크립트 코드는 브라우저나 Node.js 등에서 실행될 수 있습니다.

요약하면, 자바스크립트는 웹 브라우저에서 즉시 실행될 수 있도록 설계된 스크립트 언어이기 때문에 인터프리터 방식으로 동작합니다. 
반면 타입스크립트는 자바스크립트의 확장버전으로, 추가적인 타이핑 기능을 제공하며, 이러한 기능들은 실행 전에 제거되기 위한 컴파일 과정이 필요하므로 컴파일러를 사용합니다.

----------------------------------------------------------------
인터프리터 (Interpreter)
인터프리터는 프로그램의 소스 코드를 직접 실행하는 방식의 프로그램입니다. 소스 코드를 한 줄씩 읽으면서 해당 명령을 바로 실행합니다.

인터프리터의 특징:

즉시 실행: 소스 코드를 한 줄씩 읽어 바로 실행하기 때문에 개발 과정에서 결과를 즉시 볼 수 있습니다.
플랫폼 독립성: 인터프리터가 설치된 모든 플랫폼에서 동일한 소스 코드를 실행할 수 있습니다.
성능: 일반적으로 컴파일러에 비해 실행 속도가 느립니다. 이는 소스 코드를 실행할 때마다 해석이 필요하기 때문입니다.
예시: Python, JavaScript, Ruby 등의 언어들은 대표적으로 인터프리터 방식을 사용합니다.

컴파일러 (Compiler)
컴파일러는 프로그램의 소스 코드를 먼저 기계어로 변환한 후 해당 기계어 코드를 실행하는 방식입니다.

컴파일러의 특징:

별도의 컴파일 과정 필요: 소스 코드를 기계어로 변환하는 별도의 과정이 필요합니다.
실행 속도: 일단 컴파일된 코드는 인터프리터 방식보다 빠르게 실행될 수 있습니다.
플랫폼 종속성: 컴파일된 결과물은 특정 플랫폼에서만 동작할 수 있습니다. 여러 플랫폼에서 실행하려면 각 플랫폼마다 따로 컴파일해야 합니다.
예시: C, C++, Java(일부) 등의 언어들은 컴파일러 방식을 사용합니다.

요약하면, 인터프리터는 프로그램을 한 줄씩 바로 실행하는 방식으로 동작하며, 컴파일러는 프로그램 전체를 먼저 기계어로 변환한 후 그 결과물을 실행하는 방식입니다.

