Q. JavaScript 호이스팅에 대해 설명해주세요

A. 
호이스팅 현상은 변수나 함수 선언이 자신이 속한 스코프의 최상단으로 끌어올려지는 현상을 의미합니다.
이는 실제 코드가 물리적으로 이동하는 것이 아닌, 
자바스크립트 엔진이 코드를 해석할 때 변수 및 함수 선언을 스코프의 맨 위로 끌어올려 처리하는 현상을 의미합니다.

구체적으로 호이스팅 현상은 변수 호이스팅과 함수 호이스팅으로 나눌 수 있습니다.

[변수 호이스팅]
- var 키워드로 변수를 선언하면 호이스팅 현상이 발생합니다.
- 변수는 선언된 위치와 상관없이 스코프의 최상단으로 끌어올려집니다.
- 하지만 이 때, 초기화는 끌어올려지지 않습니다.
- 나머지 let, const의 경우 선언은 호이스팅이 발생하지만, 스코프 맨 위에서 접근하려고 하면 ReferenceError가 발생합니다.
    - 이를 일시적 사각지대(TDZ, Temporal Dead Zone)라고 부름

[함수 호이스팅]
- 함수 선언문으로 함수를 선언했을 경우 함수 선언도 호이스팅됩니다.
- 이는 function foo() {} 방식을 의미합니다.
- 하지만 함수 표현식 (ex. const foo = function(){}) 의 경우 foo 변수가 호이스팅되어서 undefined로 초기화됩니다.
- 따라서 이 경우에는 함수로 호출하려고 하면 에러가 발생합니다.

호이스팅은 코드의 가독성과 예측 가능성을 저해할 수 있기 때문에, 변수와 함수 선언을 스코프의 최상단에서 직접 하는 게 좋습니다.